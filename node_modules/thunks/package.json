{
  "name": "thunks",
  "description": "A small and magical async control flow tool, wrap promise, generator and anything to thunk.",
  "authors": [
    "Yan Qing <admin@zensh.com>"
  ],
  "version": "4.0.1",
  "main": "thunks.js",
  "jsnext:main": "thunks.es6.js",
  "repository": {
    "type": "git",
    "url": "git@github.com:thunks/thunks.git"
  },
  "license": "MIT",
  "homepage": "https://github.com/thunks/thunks",
  "keywords": [
    "async",
    "thunk",
    "thunks",
    "Promise",
    "flow",
    "yield",
    "generator",
    "coro",
    "coroutine"
  ],
  "dependencies": {},
  "devDependencies": {
    "async": ">=1.5.0",
    "bluebird": ">=3.0.5",
    "co": ">=4.6.0",
    "gulp": "^3.9.0",
    "gulp-istanbul": "^0.10.2",
    "gulp-mocha": "^2.1.3",
    "jsbench": "^0.5.3",
    "merge2": "^0.3.6",
    "mocha": "^2.3.3",
    "rsvp": ">=3.1.0",
    "should": "^7.1.1",
    "standard": "^5.3.1",
    "thenjs": ">=2.0.1",
    "when": ">=3.7.4"
  },
  "scripts": {
    "test": "standard && gulp test"
  },
  "files": [
    "README.md",
    "thunks.js",
    "thunks.d.ts",
    "thunks.es6.js"
  ],
  "standard": {
    "ignore": [
      "**/debug/**"
    ]
  },
  "readme": "thunks\n====\nA small and magical async control flow tool, wrap promise, generator and anything to thunk.\n\n[![NPM version][npm-image]][npm-url]\n[![Build Status][travis-image]][travis-url]\n[![js-standard-style][js-standard-image]][js-standard-url]\n[![Coverage Status][coveralls-image]][coveralls-url]\n[![Downloads][downloads-image]][downloads-url]\n[![Talk topic][talk-image]][talk-url]\n\n[中文说明](https://github.com/thunks/thunks/blob/master/README_zh.md)\n\n[thunks 的作用域和异常处理设计](https://github.com/thunks/thunks/blob/master/docs/scope-and-error-catch.md)\n\n## Break Change: the thunk result will no more than 2\nThere is a break change in V4.x relative to V3.x, two or more results will become a array of results.\n\n**v3.x:**\n```js\nthunk(function (done) {\n  done(null, 1, 2, 3)\n})(function (error, res) {\n  console.log.apply(console, arguments)\n  // output: `null, 1, 2, 3`\n})\n```\n\n**v4.x:**\n```js\nthunk(function (done) {\n  done(null, 1, 2, 3)\n})(function (error, res) {\n  console.log.apply(console, arguments)\n  // output: `null, [1, 2, 3]`\n})\n```\n\nif there is a `error`, the arguments will be explicitly `error`, otherwise the `error` will always be `null`(In all version).\n\n## Compatibility\n\nES3+, support node.js and all browsers.\n\n## Implementations:\n\n- [Toa](https://github.com/toajs/toa): A powerful web framework rely on thunks.\n- [thunk-redis](https://github.com/thunks/thunk-redis) A thunk/promise-based redis client with pipelining and cluster.\n- [thunk-stream](https://github.com/thunks/thunk-stream) Wrap a readable/writable/duplex/transform stream to a thunk.\n- [thunk-queue](https://github.com/thunks/thunk-queue) A thunk queue for uncertainty tasks evaluation.\n- [file-cache](https://github.com/thunks/file-cache) Read file with caching, rely on thunks.\n\nAnd a mountain of applications in server-side or client-side.\n\n## What is a thunk?\n\n1. **`thunk`** is a function that encapsulates synchronous or asynchronous code inside.\n\n2. **`thunk`** accepts only one `callback` function as an arguments, which is a CPS function.\n\n3. **`thunk`** returns another **`thunk`** function after being called, for chaining operations.\n\n4. **`thunk`** passes the results into a `callback` function after being excuted.\n\n5. If the return value of `callback` is a **`thunk`** function, then it will be executed first and its result will be send to another **`thunk`** for excution,\nor it will be send to another new **`thunk`** function as the value of the computation.\n\n## Demo\n\n```js\nvar thunk = require('../thunks.js')()\nvar fs = require('fs')\n\nvar size = thunk.thunkify(fs.stat)\n\n// generator\nthunk(function *() {\n\n  // sequential\n  console.log(yield size('.gitignore'))\n  console.log(yield size('thunks.js'))\n  console.log(yield size('package.json'))\n\n})(function *(error, res) {\n  //parallel\n  console.log(yield [\n    size('.gitignore'),\n    size('thunks.js'),\n    size('package.json')\n  ])\n})()\n```\n\n```js\nvar thunk = require('../thunks.js')()\nvar fs = require('fs')\n\nvar size = thunk.thunkify(fs.stat)\n\n// sequential\nsize('.gitignore')(function (error, res) {\n  console.log(error, res)\n  return size('thunks.js')\n\n})(function (error, res) {\n  console.log(error, res)\n  return size('package.json')\n\n})(function (error, res) {\n  console.log(error, res)\n})\n\n// parallel\nthunk.all([\n  size('.gitignore'),\n  size('thunks.js'),\n  size('package.json')\n])(function (error, res) {\n  console.log(error, res)\n})\n\n// sequential\nthunk.seq([\n  size('.gitignore'),\n  size('thunks.js'),\n  size('package.json')\n])(function (error, res) {\n  console.log(error, res)\n})\n```\n\n## Installation\n\n**Node.js:**\n\n    npm install thunks\n\n**Bower:**\n\n    bower install thunks\n\n**browser:**\n\n```html\n<script src=\"/pathTo/thunks.js\"></script>\n```\n\n## API\n\n```js\nvar thunks = require('thunks')\n```\n\n### thunks([options])\n\nMatrix of `thunk`, it generates a `thunk` generator function with it's scope.\n\"scope\" refers to the running evironments `thunk` generated(directly or indirectly) for all child thunk functions.\n\n1. Here's how you create a basic `thunk`, any exceptions would be passed the next child thunk function:\n\n  ```js\n  var thunk = thunks()\n  ```\n\n2. Here's the way to create a `thunk` listening to all exceptions in current scope with `onerror`,\nand it will make sure the exeptions not being passed to the followed child thunk function, unless `onerror` function return `true`.\n\n  ```js\n  var thunk = thunks(function (error) { console.error(error) })\n  ```\n\n3. Create a `thunk` with `onerror`, `onstop` and `debug` listeners.\nResults of this `thunk` would be passed to `debug` function first before passing to the followed child thunk function.\n\n  ```js\n  var thunk = thunks({\n    onstop: function (sig) { console.log(sig) },\n    onerror: function (error) { console.error(error) },\n    debug: function () { console.log.apply(console, arguments) }\n  })\n  ```\n\nEven multiple `thunk` main functions with diferent scope are composed,\neach scope would be seperated from each other,\nwhich means, `onerror`, `onstop` and `debug` would not run in other scopes.\n\n### thunk(thunkable)\n\nThis is the main function, named `thunk generator`, to create new child thunk functions.\n\nThe parameter `thunkable` value could be:\n\n1. a child thunk function, by calling this function a new child thunk function will be returned\n\n  ```js\n  var thunk1 = thunk(1)\n  var thunk2 = thunk(thunk1) // thunk2 equals to thunk1\n  ```\n\n2. `function (callback) {}`, by calling it, results woule be gathered and be passed to the next child thunk function\n\n  ```js\n  thunk(function (callback) {\n    callback(null, 1)\n  })(function (error, value) {\n    console.log(error, value) // null 1\n  })\n  ```\n\n3. a Promise object, results of Promise would be passed to a new child thunk function\n\n  ```js\n  var promise = Promise.resolve(1)\n\n  thunk(promise)(function (error, value) {\n    console.log(error, value) // null 1\n  })\n  ```\n\n4. objects which implements methods of `toThunk`\n\n  ```js\n  var then = Thenjs(1) // then.toThunk() return a thunk function\n\n  thunk(then)(function (error, value) {\n    console.log(error, value) // null 1\n  })\n  ```\n\n5. Generator and Generator Function, like `co`, and `yield` anything\n\n  ```js\n  thunk(function *() {\n    var x = yield 10\n    return 2 * x\n  })(function *(error, res) {\n    console.log(error, res) // null, 20\n\n    return yield [1, 2, thunk(3)]\n  })(function *(error, res) {\n    console.log(error, res) // null, [1, 2, 3]\n    return yield {\n      name: 'test',\n      value: thunk(1)\n    }\n  })(function (error, res) {\n    console.log(error, res) // null, {name: 'test', value: 1}\n  })\n  ```\n\n6. values in other types would be valid results passing to a new child thunk function\n\n  ```js\n  thunk(1)(function (error, value) {\n    console.log(error, value) // null 1\n  })\n\n  thunk([1, 2, 3])(function (error, value) {\n    console.log(error, value) // null [1, 2, 3]\n  })\n  ```\n\nYou can also run with `this`:\n\n  ```js\n  thunk.call({x: 123}, 456)(function (error, value) {\n    console.log(error, this.x, value) // null 123 456\n    return 'thunk!'\n  })(function (error, value) {\n    console.log(error, this.x, value) // null 123 'thunk!'\n  })\n  ```\n\n### thunk.all(obj)\n### thunk.all(thunk1, ..., thunkX)\n\nReturns a child thunk function.\n\n`obj` can be an array or an object that contains any value. `thunk.all` will transform value to a child thunk function and excuted it in parallel. After all of them are finished, an array containing results(in its original order) would be passed to the a new child thunk function.\n\n```js\nthunk.all([\n  thunk(0),\n  function *() { return yield 1 },\n  2,\n  thunk(function (callback) { callback(null, [3]) })\n])(function (error, value) {\n  console.log(error, value) // null [0, 1, 2, [3]]\n})\n\nthunk.all({\n  a: thunk(0),\n  b: thunk(1),\n  c: 2,\n  d: thunk(function (callback) { callback(null, [3]) })\n})(function (error, value) {\n  console.log(error, value) // null {a: 0, b: 1, c: 2, d: [3]}\n})\n```\n\nYou may also write code like this:\n\n```js\nthunk.all.call({x: [1, 2, 3]}, [4, 5, 6])(function (error, value) {\n  console.log(error, this.x, value) // null [1, 2, 3] [4, 5, 6]\n  return 'thunk!'\n})(function (error, value) {\n  console.log(error, this.x, value) // null [1, 2, 3] 'thunk!'\n})\n```\n\n### thunk.seq([thunk1, ..., thunkX])\n### thunk.seq(thunk1, ..., thunkX)\n\nReturns a child thunk function.\n\n`thunkX` can be any value, `thunk.seq` will transform value to a child thunk function and excuted it in order. After all of them are finished, an array containing results(in its original order) would be passed to the a new child thunk function.\n\n```js\nthunk.seq([\n  function (callback) {\n    setTimeout(function () {\n      callback(null, 'a', 'b')\n    }, 100)\n  },\n  thunk(function (callback) {\n    callback(null, 'c')\n  }),\n  [thunk('d'), function *() { return yield 'e' }], // thunk in array will be excuted in parallel\n  function (callback) {\n    should(flag).be.eql([true, true])\n    flag[2] = true\n    callback(null, 'f')\n  }\n])(function (error, value) {\n  console.log(error, value) // null [['a', 'b'], 'c', ['d', 'e'], 'f']\n})\n```\nor\n\n```js\nthunk.seq(\n  function (callback) {\n    setTimeout(function () {\n      callback(null, 'a', 'b')\n    }, 100)\n  },\n  thunk(function (callback) {\n    callback(null, 'c')\n  }),\n  [thunk('d'), thunk('e')], // thunk in array will be excuted in parallel\n  function (callback) {\n    should(flag).be.eql([true, true])\n    flag[2] = true\n    callback(null, 'f')\n  }\n)(function (error, value) {\n  console.log(error, value) // null [['a', 'b'], 'c', ['d', 'e'], 'f']\n})\n```\n\nYou may also write code like this:\n\n```js\nthunk.seq.call({x: [1, 2, 3]}, 4, 5, 6)(function (error, value) {\n  console.log(error, this.x, value) // null [1, 2, 3] [4, 5, 6]\n  return 'thunk!'\n})(function (error, value) {\n  console.log(error, this.x, value) // null [1, 2, 3] 'thunk!'\n})\n```\n\n### thunk.race([thunk1, ..., thunkX])\n### thunk.race(thunk1, ..., thunkX)\n\nReturns a child thunk function with the value or error from one first completed.\n\n### thunk.digest(error, val1, val2, ...)\n\nReturns a child thunk function.\n\nTransform a Node.js callback function into a child thunk function.\nThis child thunk function retuslts in `(error, val1, val2, ...)`, which is just being passed to a new child thunk function,\nlike:\n\n```js\nthunk(function (callback) {\n  callback(error, val1, val2, ...)\n})\n```\n\nOne use case:\n\n```js\nthunk(function (callback) {\n  //...\n  callback(error, result)\n})(function (error, value) {\n  //...\n  return thunk.digest(error, value)\n})(function (error, value) {\n  //...\n})\n```\n\nYou may also write code with `this`：\n\n```js\nvar a = {x: 1}\nthunk.digest.call(a, null, 1, 2)(function (error, value1, value2) {\n  console.log(this, error, value1, value2) // { x: 1 } null 1 2\n})\n```\n\n### thunk.thunkify(fn)\n\nReturns a new function that would return a child thunk function\n\nTransform a `fn` function which is in Node.js style into a new function.\nThis new function does not accept `callback` as arguments, but accepts child thunk functions.\n\n```js\nvar thunk = require('../thunks.js')()\nvar fs = require('fs')\nvar fsStat = thunk.thunkify(fs.stat)\n\nfsStat('thunks.js')(function (error, result) {\n  console.log('thunks.js: ', result)\n})\nfsStat('.gitignore')(function (error, result) {\n  console.log('.gitignore: ', result)\n})\n```\n\nYou may also write code with `this`:\n\n```js\nvar obj = {a: 8}\nfunction run (x, callback) {\n  //...\n  callback(null, this.a * x)\n}\n\nvar run = thunk.thunkify.call(obj, run)\n\nrun(1)(function (error, result) {\n  console.log('run 1: ', result)\n})\nrun(2)(function (error, result) {\n  console.log('run 2: ', result)\n})\n```\n\n### thunk.lift(fn)\n\n`lift` comes from Haskell, it transform a sync function `fn` into a new async  function.\nThis new function will accept `thunkable` arguments, evaluate them, then run as the original function `fn`. The new function return a child thunk function.\n\n```js\nvar thunk = require('../thunks.js')()\n\nfunction calculator (a, b, c) {\n  return (a + b + c) * 10\n}\n\nvar calculatorT = thunk.lift(calculator)\n\nvar value1 = thunk(2)\nvar value2 = Promise.resolve(3)\n\ncalculatorT(value1, value2, 5)(function (error, result) {\n  console.log(result) // 100\n})\n```\n\nYou may also write code with `this`:\n\n```js\nvar calculatorT = thunk.lift.call(context, calculator)\n```\n\n### thunk.persist(thunkable)\n\nit transform `thunkable` value to a persist thunk function, which can be called more than once with the same result(like as promise). The new function return a child thunk function.\n\n```js\nvar thunk = require('../thunks.js')()\n\nvar persistThunk = thunk.persist(thunk(x))\n\npersistThunk(function (error, result) {\n  console.log(1, result) // x\n  return persistThunk(function (error, result) {\n    console.log(2, result) // x\n    return persistThunk\n  })\n})(function (error, result) {\n  console.log(3, result) // x\n})\n```\n\nYou may also write code with `this`:\n\n```js\nvar persistThunk = thunk.persist.call(context, thunkable)\n```\n\n### thunk.delay(delay)\n\nReturn a child thunk function, this child thunk function will be called after `delay` milliseconds.\n\n```js\nconsole.log('thunk.delay 500: ', Date.now())\nthunk.delay(500)(function () {\n  console.log('thunk.delay 1000: ', Date.now())\n  return thunk.delay(1000)\n})(function () {\n  console.log('thunk.delay end: ', Date.now())\n})\n```\n\nYou may also write code with `this`:\n\n```js\nconsole.log('thunk.delay start: ', Date.now())\nthunk.delay.call(this, 1000)(function () {\n  console.log('thunk.delay end: ', Date.now())\n})\n```\n\n### thunk.stop([messagge])\n\nThis will stop control flow process with a message similar to Promise's cancelable(not implement yet). It will throw a stop signal object.\nStop signal is a object with a message and `status === 19`(POSIX signal SIGSTOP) and a special code. Stop signal can be caught by `onstop`, and aslo can be caught by `try catch`, in this case it will not trigger `onstop`.\n\n```js\nvar thunk = require('../thunks.js')({\n  onstop: function (res) {\n    if (res) console.log(res.code, res.status, res) // SIGSTOP 19 { message: 'Stop now!' }\n  }\n})\n\nthunk(function (callback) {\n  thunk.stop('Stop now!')\n  console.log('It will not run!')\n})(function (error, value) {\n  console.log('It will not run!', error)\n})\n```\n\n```js\nthunk.delay(100)(function () {\n  console.log('Hello')\n  return thunk.delay(100)(function () {\n    thunk.stop('Stop now!')\n    console.log('It will not be run!')\n  })\n})(function (error, value) {\n  console.log('It will not be run!')\n})\n```\n\n## Who's using\n\n+ Teambition: https://www.teambition.com/ use in server-side and client-side\n\n[npm-url]: https://npmjs.org/package/thunks\n[npm-image]: http://img.shields.io/npm/v/thunks.svg\n\n[travis-url]: https://travis-ci.org/thunks/thunks\n[travis-image]: http://img.shields.io/travis/thunks/thunks.svg\n\n[coveralls-url]: https://coveralls.io/r/thunks/thunks\n[coveralls-image]: https://coveralls.io/repos/thunks/thunks/badge.svg\n\n[downloads-url]: https://npmjs.org/package/thunks\n[downloads-image]: http://img.shields.io/npm/dm/thunks.svg?style=flat-square\n\n[talk-url]: https://guest.talk.ai/rooms/d1ccbf802n\n[talk-image]: https://img.shields.io/talk/t/d1ccbf802n.svg\n\n[js-standard-url]: https://github.com/feross/standard\n[js-standard-image]: https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/thunks/thunks/issues"
  },
  "_id": "thunks@4.0.1",
  "dist": {
    "shasum": "9b300ab50ad4d2004c094bc55bfc99aa96fd43e1"
  },
  "_from": "thunks@",
  "_resolved": "https://registry.npmjs.org/thunks/-/thunks-4.0.1.tgz"
}
